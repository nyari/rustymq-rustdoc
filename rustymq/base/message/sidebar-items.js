initSidebarItems({"enum":[["Part","Multipart message part identifierEnum for tracking multipart messages"],["PartError","Multipart message part tracking errorPartError enum to handle errors regarding the tracking of multipart messages"]],"struct":[["MessageMetadata","Metadata for every ZeroMQ MessageThis datastructure contains data for tracking, and routing messages between links and the built up communication network"],["RawMessage","RawMessage is a message type implementing the Message trait, with a binary buffer set as payload"],["TypedMessage","Typed message is a generic implementation for a Message trait with custom type"]],"trait":[["Message","RustyMQ Message Trait for a universal interface for messages with a given associated payload type"],["SerializableMessagePayload","Implementing this trait on a struct allows for using a [`TypedMessage`] with the struct"]],"type":[["Buffer","General buffer type to be used in RusyMQ"],["BufferMutSlice","General buffer mutable slice type to be used in RustyMQ"],["BufferSlice","General buffer slice type to be used in RustyMQ"],["CommunicationModelId","Type definition for the identifier for the different communication models. For details see [super::super::model]:here"],["ConversationId","Type definition for conversation identifier data structure"],["MessageId","Type definition for message identifier data structure"],["PeerId","Type definition for conversation peer identifier data structure"]]});